@using BlazorAdmin.Client.Services.Implementations
@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider


<AuthorizeView>
    <Authorized>
        <Layout>
            <Header Class="header">

                <Row Justify="space-between" Align="middle" >
                    <span class="logo"></span>
                    <Button Type="link" Icon="logout" @onclick="LogoutClick" >Logout</Button>
                </Row>
            </Header>
            <Layout>
                <Sider Width="200" Class="site-layout-background">
                    <Menu Mode="MenuMode.Inline"
                          Style="height: 100%; border-right: 0;">
                        <MenuItem Key="1">
                            <MenuLink href="/md" Match="NavLinkMatch.All">markdown demo</MenuLink>
                        </MenuItem>
                    </Menu>
                </Sider>
                <Layout Style="padding: 0 24px 24px;">
                    @*<Breadcrumb Style="margin: 16px 0;">
                        <BreadcrumbItem>Home</BreadcrumbItem>
                        <BreadcrumbItem>List</BreadcrumbItem>
                        <BreadcrumbItem>App</BreadcrumbItem>
                    </Breadcrumb>*@
                    <Content Class="site-layout-background" Style="padding: 24px; margin: 0; min-height: 280px;">
                        @Body
                    </Content>
                </Layout>
            </Layout>
        </Layout>

    </Authorized>
</AuthorizeView>
<style>
    .logo {
        width: 120px;
        height: 31px;
        background: rgba(255, 255, 255, 0.2);
        margin: 16px 28px 16px 0;
    }

    .site-layout-background { background: #fff; }
</style>


@functions{

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!(await AuthenticationState).User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
    }

    async Task LogoutClick()
    {
        await authStateProvider.Logout();
        navigationManager.NavigateTo("/login");
    }

}